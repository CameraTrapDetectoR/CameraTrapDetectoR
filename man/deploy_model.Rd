% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deploy_model.R
\name{deploy_model}
\alias{deploy_model}
\title{Deploy model on camera trap images}
\usage{
deploy_model(
  data_dir = NULL,
  model_type = "species",
  recursive = TRUE,
  file_extensions = c(".jpg"),
  make_plots = TRUE,
  plot_label = TRUE,
  output_dir = NULL,
  sample50 = FALSE,
  write_bbox_csv = FALSE,
  score_threshold = 0.6,
  overlap_correction = TRUE,
  overlap_threshold = 0.9,
  get_metadata = FALSE,
  write_metadata = FALSE,
  review_threshold = 1,
  checkpoint_frequency = 10,
  latitude = NA,
  longitude = NA,
  h = 307,
  w = 408,
  lty = 1,
  lwd = 2,
  col = "red"
)
}
\arguments{
\item{data_dir}{Absolute path to the folder containing your images}

\item{model_type}{Options are 'general', 'species', 'family', or 'pig_only' 
with appropriate version appended with an underscore. For example, to use the version 1 species model,
list `model_type` as "species_v1". Specifying a model type without a version appended will default to
the latest version of that model available for your package vesion.
A full list of available models and details is available 
on the CameraTrapDetectoR Github wiki.}

\item{recursive}{boolean. Do you have images in subfolders within your
data_dir that you want to analyze, if so, set to TRUE. If you only want to 
analyze images within your data_dir and not within sub-folders, set to FALSE.}

\item{file_extensions}{The types of extensions on your image files. Case insensitive; enter as a string.
Accepts the following file types: ".jpg", ".png", ".tif", ".pdf". Default is ".jpg"}

\item{make_plots}{boolean. Do you want to make plots of the images with
their predicted bounding boxes?}

\item{plot_label}{boolean. Do you want the plots to contain the predicted
class of object}

\item{output_dir}{You can specify absolute path to output. Default is `NULL`,
and creates a folder within your data_dir. Only specify a path if you want the
results stored somewhere else on your computer.}

\item{sample50}{boolean. Do you want to run the model only on a subset of 
50 images from your dataset? This is a good idea if you are experimenting 
with settings.}

\item{write_bbox_csv}{boolean. Do you want to create a csv with all of the 
information on predicted bounding boxes? This csv will include all bounding boxes,
even those with low probability.}

\item{score_threshold}{Confidence threshold for using a bounding box, accepts 
values from 0-1. A lower number will produce more bboxes (it will be less
stringent in deciding to make a bbox). A higher number will produce fewer
bboxes (it will be more stringent).}

\item{overlap_correction}{boolean. Should overlapping detections be
evaluated for overlap and highest confidence detection be returned}

\item{overlap_threshold}{Overlap threshold used when determining if bounding box
detections are to be considered a single detection. Accepts values from 0-1
representing the proportion of bounding box overlap.}

\item{get_metadata}{boolean. Collect metadata for each image.}

\item{write_metadata}{boolean. Write prediction info to image metadata}

\item{review_threshold}{Confidence threshold to accept predictions when writing image metadata}

\item{checkpoint_frequency}{Number of images to run between saving a checkpoint. Default is 10;
can be any positive integer; if it is larger than the size of your dataset, no checkpoints will be saved,}

\item{latitude}{image location latitude. Use only if all images in the model run come from the same location.}

\item{longitude}{image location longitude. Use only if all images in the model run come from the same location.}

\item{h}{The image height (in pixels) for the annotated plot. Only used if
\code{make_plots=TRUE}.}

\item{w}{The image width (in pixels) for the annotated plot.}

\item{lty}{line type for bbox plot. See \code{?plot} for details}

\item{lwd}{line width for bbox plot. See \code{?plot} for details}

\item{col}{line color for bbox plot. See \code{?plot} for details}
}
\value{
a data frame of model predictions, with predicted number of individuals
within each detected class for each image in the data directory. This data frame 
is automatically saved as a .csv file in the output directory, along with a .txt
file of all arguments used in that instance of the `deploy_model` function. 

If the user specifies, a .csv of bounding box coordinates is also automatically 
saved in the output directory.If the user requests image plots with bounding boxes,
these plotted image copies will be saved as .png files in the output directory.
}
\description{
This function deploys a model trained to identify and count the objects
in camera trap images. 

This function deploys a customized computer vision model to detect and 
classify objects in camera trap images. The function will find all indicated image
files in the user-specified directory and deploy the user-specified model on these
images.
}
\details{
CameraTrapDetectoR contains four types of models: the 'general' classifies mammals, 
birds, humans, and vehicles; the 'family' model classifies taxonomic families; 
the 'species' model classifies taxonomic species; the 'pig_only' model classifies
wild pigs. The most recent version of a given model will be deployed unless a
previous version is expressly specified, i.e. \code{model_type='species_v1'}.
Each model type and version) is trained independently to give the user the 
option to run multiple model types and/or versions on the same dataset sequentially, 
and treat each set of predictions as an independent observer.

Model version details, including class-wise results on an out-of-sample test
data set, are available on the CameraTrapDetectoR github repository.
}
\examples{
# path to sample images shipped with the package
data_dir <- get_samples() 

# specify only the data_dir, except all other default args
df_gen <- deploy_model(data_dir = data_dir)

# run species model at varying confidence score thresholds
scores <- c(0.3, 0.5, 0.7)
for(i in 1:length(scores)){
deploy_model(data_dir = data_dir, model_type = 'species', score_threshold = scores[i])
}

# loop through each model
data(models)
for(i in 1:nrow(models)){
deploy_model(data_dir = data_dir, model_type = models$model_name[i])
}
 
}
